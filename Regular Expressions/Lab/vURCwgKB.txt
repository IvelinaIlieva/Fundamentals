Cheatsheat
[word]
[A-Z]
[a-z]
[0-9]

\w - [A-Z][a-z][0-9]_
\W - opposite \w
\s - " "
\S - opposite \s
\d - 0-9
\D - opposite 0-9

\+\d* -> +359885976002 a+b -> +35988597600 +
\+\d+ -> +359885976002 a+b -> +359885976002
\+\d? -> +359885976002 a+b -> +3 +

\+\d{4} -> + 4 digits
\+\d{1,4} -> + between 1 and 4 digits
\+\d{4,} -> + above (including) 4 digits

d{2}-(\w{3})-\d{4} -> () -> creates group
d{2}-(?:\w{3})-\d{4} -> (?:) -> non capture group
(?<day>\d{2})-(?<month>\w{3})-(?<year>\d{4}) - (?<name>) - group name
(?<name>\d{2})-(\w{3})-\g<name> - \g<name> - reuse groups
(:?http|https):\/\/([A-Za-z0-9]+)(\.com) - https://regex101.com -> will not count https or http as a group
^[A-Z][a-z]+$ -> Stoyan -> valid -> ^ should start / $ should end
<(\w+)[^>]*>.*?<\/\1> - <b>Regular Expressions</b> - \1 copy first group

Code Example
using System;
using System.Text.RegularExpressions;

namespace RegexPlayground
{
    class Program
    {
        static void Main(string[] args)
        {
            string emailPattern = @"([A-Za-z0-9]+)@([A-Za-z]+\.[a-z]+)";

            string email = "____afdsfasd_stoyan@shopov.bg___afdsfasd_stoyan@shopov.bg_--dsfasdsfas--dsfasdsfas_gosho@abv.bg";

            Regex regex = new Regex(emailPattern);

            MatchCollection matches = regex.Matches(email);

            //Note: instead of var, we use Match
            foreach (Match match in matches)
            {
                Console.WriteLine(match.Value);
            }

            //Match match = regex.Match(email);

            //Console.WriteLine(match.Success);
            //Console.WriteLine(match.Value);

            //Console.WriteLine(match.Groups[1].Value);
            //Console.WriteLine(match.Groups[2].Value);
        }
    }
}

01
using System;
using System.Text.RegularExpressions;

namespace RegexPlayground
{
    class Program
    {
        static void Main(string[] args)
        {
            string pattern = @"\b([A-Z][a-z]{1,}) ([A-Z][a-z]{1,})\b";

            string input = Console.ReadLine();

            MatchCollection matches = Regex.Matches(input, pattern);

            foreach (Match item in matches)
            {
                Console.Write(item.Value + " ");
            }
            Console.WriteLine();
        }
    }
}

02
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace RegexPlayground
{
    class Program
    {
        static void Main(string[] args)
        {
            string pattern = @"\+359( |-)2\1\d{3}\1\d{4}\b";

            string input = Console.ReadLine();

            MatchCollection matches = Regex.Matches(input, pattern);
            List<string> result = new List<string>();

            foreach (Match item in matches)
            {
                result.Add(item.Value);
            }

            Console.WriteLine(string.Join(", ", result));
        }
    }
}


03
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace RegexPlayground
{
    class Program
    {
        static void Main(string[] args)
        {
            string pattern = @"\b(\d{2})(\.|-|\/)([A-Z][a-z]{2})\2(\d{4})\b";

            string input = Console.ReadLine();

            MatchCollection matches = Regex.Matches(input, pattern);

            foreach (Match match in matches)
            {
                string day = match.Groups[1].Value;
                string month = match.Groups[3].Value;
                string year = match.Groups[4].Value;

                Console.WriteLine($"Day: {day}, Month: {month}, Year: {year}");
            }     
        }
    }
}
